module WatchTower
  module Server
    module Decorator
      class ProjectDecorator < ApplicationDecorator
        decorates :project

        # Returns a human formatted time
        #
        # @return [String] The elapsed time formatted
        def elapsed
          humanize_time elapsed_time
        end

        # Return an image representing the percentage of this project
        #
        # @return [String] image_tag
        def percentage
          max_elapsed = Project.order('elapsed_time DESC').first.elapsed_time

          percentage = (elapsed_time * 100 / max_elapsed).to_i

          <<-EHTML
            <img src="#{asset_path('percentage.png')}" data-width="#{percentage}" />
          EHTML
        end

        # Accessing Helpers
        #   You can access any helper via a proxy
        #
        #   Normal Usage: helpers.number_to_currency(2)
        #   Abbreviated : h.number_to_currency(2)
        #
        #   Or, optionally enable "lazy helpers" by calling this method:
        #     lazy_helpers
        #   Then use the helpers with no proxy:
        #     number_to_currency(2)

        # Defining an Interface
        #   Control access to the wrapped subject's methods using one of the following:
        #
        #   To allow only the listed methods (whitelist):
        #     allows :method1, :method2
        #
        #   To allow everything except the listed methods (blacklist):
        #     denies :method1, :method2

        # Presentation Methods
        #   Define your own instance methods, even overriding accessors
        #   generated by ActiveRecord:
        #
        #   def created_at
        #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
        #                   :class => 'timestamp'
        #   end
      end
    end
  end
end